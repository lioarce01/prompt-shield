
services:
  # Go Detection Engine
  detection-engine:
    build:
      context: ./detection-engine
      dockerfile: docker/Dockerfile
    container_name: prompt-defense-detection
    ports:
      - "8080:8080"
    environment:
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    volumes:
      - ./detection-engine/configs:/app/configs:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "-O", "/dev/null", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - prompt-defense

  # FastAPI Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: docker/Dockerfile
      target: production
    container_name: prompt-defense-gateway
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/prompt_defense
      - REDIS_URL=redis://redis:6379/0
      - DETECTION_ENGINE_URL=http://detection-engine:8080
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8000
      - ALLOWED_HOSTS=localhost,127.0.0.1,api.example.com
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      detection-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    volumes:
      - ./api-gateway/logs:/app/logs
    networks:
      - prompt-defense

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: prompt-defense-postgres
    environment:
      POSTGRES_DB: prompt_defense
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api-gateway/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d prompt_defense"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - prompt-defense

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: prompt-defense-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - prompt-defense

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: prompt-defense-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - prompt-defense
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prompt-defense-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    depends_on:
      - detection-engine
      - api-gateway
    restart: unless-stopped
    networks:
      - prompt-defense

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: prompt-defense-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - prompt-defense

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  prompt-defense:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16